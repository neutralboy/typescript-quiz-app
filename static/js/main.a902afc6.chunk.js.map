{"version":3,"sources":["API.ts","utils.ts","components/Question.tsx","App.tsx","index.tsx"],"names":["Difficulty","fetchQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Question","callback","userAnswer","questionNr","totalQuestions","score","className","dangerouslySetInnerHTML","__html","e","key","value","disabled","onClick","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","setScore","gameOver","setGameOver","theme","setTheme","startTrivia","EASY","newQuestions","document","documentElement","style","setProperty","length","undefined","answer","currentTarget","correct","prev","answerObj","correctAnswer","TOTAL_QUESTIONS","nextQuestion","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a902afc6.chunk.js","sourcesContent":["import { shuffleArray } from './utils';\n\nexport type Question = {\n    category: string;\n    correct_answer: string;\n    difficulty: string;\n    incorrect_answers: string[];\n    question: string;\n    type: string;   \n};\n\nexport type QuestionState = Question & { answers: string[] };\n\nexport enum Difficulty{\n    EASY = \"easy\",\n    MEDIUM = \"medium\",\n    HARD = \"hard\"\n}\n\nexport const fetchQuestions =  async (amount: number, difficulty: Difficulty) => {\n    const endpoint = `https://opentdb.com/api.php?amount=${amount}&category=27&difficulty=${difficulty}&type=multiple`;\n    const data = await (await fetch(endpoint)).json();\n    return data.results.map((question: Question) => ({\n        ...question,\n        answers: shuffleArray([\n            ...question.incorrect_answers,\n            question.correct_answer\n        ])\n    }) )\n}","export const shuffleArray = (array: any[]) => \n    [...array].sort(()=>Math.random()-0.5)","import React from 'react';\n\nimport {AnswerObject} from '../App';\n\ntype Props = {\n    question: string;\n    answers: string[];\n    callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\n    userAnswer: AnswerObject | undefined;\n    questionNr: number;\n    totalQuestions: number;\n    score: number;\n}\n\nconst Question: React.FC<Props> = ({\n     question, answers, callback, userAnswer, questionNr, totalQuestions, score\n    }) => {\n    return (\n        <div>\n            <div className=\"header option\">\n                <div className=\"is-left\">\n                    <p className=\"number\">\n                        {questionNr} / {totalQuestions}\n                    </p>\n                </div>\n                <div className=\"is-right\">\n                    <p className=\"score\">{score}</p>\n                </div>\n            </div>\n\n            <h2 dangerouslySetInnerHTML={{ __html: question }} />\n            <div className=\"option\">\n                {answers.map(e=>\n                    <div className=\"option\">\n                        <button className=\"is-medium is-fullwidth is-size-5\" key={Math.random()} value={e} disabled={!!userAnswer} onClick={callback} >\n                            <span dangerouslySetInnerHTML={{ __html: e }} />\n                        </button>\n                    </div>\n                    )}\n            </div>\n        </div> \n    )\n    \n}\n\nexport default Question;","import React, {useState} from 'react';\n\nimport {fetchQuestions} from './API';\n\nimport {QuestionState, Difficulty} from './API';\n\nimport Question from './components/Question';\n\nimport \"./styles/App.css\";\n\nconst TOTAL_QUESTIONS = 10;\n\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n}\n\n\nconst App = () => {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n  const [theme, setTheme] = useState(\"dark\");\n\n  const changeTheme = () => {\n      if(theme === \"dark\"){ \n        document.documentElement.style.setProperty('--hiq-body-background-color', '#FFFBFC');\n        document.documentElement.style.setProperty('--hiq-html-background-color', '#FFFBFC');\n        document.documentElement.style.setProperty('--hiq-text-color', '#010400');\n        document.documentElement.style.setProperty('--hiq-color-primary', '#0074ff');\n          setTheme(\"light\");\n    }\n      else{\n          document.documentElement.style.setProperty('--hiq-body-background-color', '#010400');\n          document.documentElement.style.setProperty('--hiq-html-background-color', '#010400');\n          document.documentElement.style.setProperty('--hiq-text-color', '#FFFBFC');\n          document.documentElement.style.setProperty('--hiq-color-primary', '#62BBC1');\n          setTheme(\"dark\");\n      }\n  }\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestions = await fetchQuestions(\n      TOTAL_QUESTIONS,\n      Difficulty.EASY\n    );\n\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  }\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement> ) => {\n    if(!gameOver){\n      const answer = e.currentTarget.value;\n      const correct = questions[number].correct_answer === answer;\n      if(correct){\n        setScore( prev => prev + 1 )\n      }\n      const answerObj = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer\n      }\n      setUserAnswers(prev => [...prev, answerObj])\n      if(number+1 === TOTAL_QUESTIONS){ setGameOver(true) }\n    }\n  }\n\n  const nextQuestion = () => {\n    // Go to next question if not last\n    const nextQuestion = number + 1;\n    if(nextQuestion == TOTAL_QUESTIONS){\n      setGameOver(true);\n    }else{\n      setNumber(nextQuestion);\n    }\n  }\n\n  return (\n    <div className=\"pad-top strech\">\n      <div className=\"container\">\n        <div className=\"header\">\n          <div className=\"is-left\">\n            <h1 className=\"family-secondary\">Typescript Quiz App</h1>\n          </div>\n          <div className=\"is-right\">\n            <button onClick={changeTheme} className=\"button is-danger\">\n                { theme === \"dark\" ? <span>ðŸŒž</span> : <span>ðŸŒ™</span> }\n            </button>\n          </div>\n        </div>\n        \n        <hr />\n\n        { gameOver &&\n          <button className=\"button is-large is-fullwidth\" onClick={startTrivia} >\n            Start the Quiz\n          </button>\n        }\n\n        \n        { loading && <progress>indeterminate progress</progress> }\n        { !loading && !gameOver && (questions.length !== 0) &&\n        <Question\n          questionNr = {number + 1}\n          totalQuestions = {TOTAL_QUESTIONS}\n          question = {questions[number].question}\n          answers = {questions[number].answers}\n          userAnswer = {userAnswers ? userAnswers[number] : undefined}\n          callback={checkAnswer}\n          score={score}\n        />\n      }\n\n        <div className=\"header\">\n            <div className=\"is-left\">\n\n            </div>\n            <div className=\"is-right\">\n                { !gameOver && !loading && userAnswers.length === number+1 && (number !== TOTAL_QUESTIONS - 1) &&\n                    <button className=\"next is-medium is-danger\" onClick={nextQuestion} >Next Question</button>\n                }   \n            </div>\n        </div>\n\n      \n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}